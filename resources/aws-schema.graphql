type OptionGroupMemberships {
  OptionGroupName: String
  Status: String
}

type SubnetAvailabilityZone {
  Name: String
}

type Subnets {
  SubnetIdentifier: String
  SubnetStatus: String
  SubnetAvailabilityZone: SubnetAvailabilityZone
}

type DbSubnetGroup {
  DBSubnetGroupName: String
  DBSubnetGroupDescription: String
  VpcId: String
  SubnetGroupStatus: String
  Subnets: [Subnets]
}

type DbParameterGroups {
  DBParameterGroupName: String
  ParameterApplyStatus: String
}

type VpcSecurityGroups {
  VpcSecurityGroupId: String
  Status: String
}

type Endpoint {
  Address: String
  Port: Int
  HostedZoneId: String
}

type DbInstances {
  DBInstanceIdentifier: String
  DBInstanceClass: String
  Engine: String
  DBInstanceStatus: String
  MasterUsername: String
  AllocatedStorage: Int
  InstanceCreateTime: String
  PreferredBackupWindow: String
  BackupRetentionPeriod: Int
  AvailabilityZone: String
  PreferredMaintenanceWindow: String
  MultiAZ: Boolean
  EngineVersion: String
  AutoMinorVersionUpgrade: Boolean
  LicenseModel: String
  PubliclyAccessible: Boolean
  StorageType: String
  DbInstancePort: Int
  DBClusterIdentifier: String
  StorageEncrypted: Boolean
  KmsKeyId: String
  DbiResourceId: String
  CACertificateIdentifier: String
  CopyTagsToSnapshot: Boolean
  MonitoringInterval: Int
  PromotionTier: Int
  DBInstanceArn: String
  IAMDatabaseAuthenticationEnabled: Boolean
  PerformanceInsightsEnabled: Boolean
  DeletionProtection: Boolean
  AssociatedRoles: [String]
  DomainMemberships: [String]
  OptionGroupMemberships: [OptionGroupMemberships]
  ReadReplicaDBInstanceIdentifiers: [String]
  DBSubnetGroup: DbSubnetGroup
  DBParameterGroups: [DbParameterGroups]
  VpcSecurityGroups: [VpcSecurityGroups]
  DBSecurityGroups: [String]
  Endpoint: Endpoint
}

type Rds {
  NextToken: String
  DBInstances: [DbInstances]
}

type DbClusterMembers {
  DBInstanceIdentifier: String
  IsClusterWriter: Boolean
  DBClusterParameterGroupStatus: String
  PromotionTier: Int
}

type DbClusters {
  AllocatedStorage: Int
  BackupRetentionPeriod: Int
  DBClusterIdentifier: String
  DBClusterParameterGroup: String
  DBSubnetGroup: String
  Status: String
  EarliestRestorableTime: String
  Endpoint: String
  ReaderEndpoint: String
  MultiAZ: Boolean
  Engine: String
  EngineVersion: String
  LatestRestorableTime: String
  Port: Int
  MasterUsername: String
  PreferredBackupWindow: String
  PreferredMaintenanceWindow: String
  HostedZoneId: String
  StorageEncrypted: Boolean
  KmsKeyId: String
  DbClusterResourceId: String
  DBClusterArn: String
  IAMDatabaseAuthenticationEnabled: Boolean
  ClusterCreateTime: String
  EngineMode: String
  DeletionProtection: Boolean
  HttpEndpointEnabled: Boolean
  ActivityStreamStatus: String
  CopyTagsToSnapshot: Boolean
  CrossAccountClone: Boolean
  DomainMemberships: [String]
  AssociatedRoles: [String]
  VpcSecurityGroups: [VpcSecurityGroups]
  DBClusterMembers: [DbClusterMembers]
  ReadReplicaIdentifiers: [String]
  AvailabilityZones: [String]
}

type RdsClusters {
  NextToken: String
  DBClusters: [DbClusters]
}

type MetadataOptions {
  State: String
  HttpTokens: String
  HttpPutResponseHopLimit: Int
  HttpEndpoint: String
}

type HibernationOptions {
  Configured: Boolean
}

type CapacityReservationSpecification {
  CapacityReservationPreference: String
}

type CpuOptions {
  CoreCount: Int
  ThreadsPerCore: Int
}

type Tags {
  Key: String
  Value: String
}

type StateReason {
  Code: String
  Message: String
}

type SecurityGroups {
  GroupName: String
  GroupId: String
}

type PrivateIpAddresses {
  Primary: Boolean
  PrivateDnsName: String
  PrivateIpAddress: String
}

type Groups {
  GroupName: String
  GroupId: String
}

type Attachment {
  AttachTime: String
  AttachmentId: String
  DeleteOnTermination: Boolean
  DeviceIndex: Int
  Status: String
}

type NetworkInterfaces {
  Description: String
  MacAddress: String
  NetworkInterfaceId: String
  OwnerId: String
  PrivateDnsName: String
  PrivateIpAddress: String
  SourceDestCheck: Boolean
  Status: String
  SubnetId: String
  VpcId: String
  InterfaceType: String
  PrivateIpAddresses: [PrivateIpAddresses]
  Ipv6Addresses: [String]
  Groups: [Groups]
  Attachment: Attachment
}

type Ebs {
  AttachTime: String
  DeleteOnTermination: Boolean
  Status: String
  VolumeId: String
}

type BlockDeviceMappings {
  DeviceName: String
  Ebs: Ebs
}

type State {
  Code: Int
  Name: String
}

type ProductCodes {
  ProductCodeId: String
  ProductCodeType: String
}

type Placement {
  AvailabilityZone: String
  GroupName: String
  Tenancy: String
}

type Monitoring {
  State: String
}

type Instances {
  AmiLaunchIndex: Int
  ImageId: String
  InstanceId: String
  InstanceType: String
  KeyName: String
  LaunchTime: String
  PrivateDnsName: String
  PrivateIpAddress: String
  PublicDnsName: String
  StateTransitionReason: String
  SubnetId: String
  VpcId: String
  Architecture: String
  ClientToken: String
  EbsOptimized: Boolean
  Hypervisor: String
  RootDeviceName: String
  RootDeviceType: String
  SourceDestCheck: Boolean
  VirtualizationType: String
  MetadataOptions: MetadataOptions
  HibernationOptions: HibernationOptions
  CapacityReservationSpecification: CapacityReservationSpecification
  CpuOptions: CpuOptions
  Tags: [Tags]
  StateReason: StateReason
  SecurityGroups: [SecurityGroups]
  NetworkInterfaces: [NetworkInterfaces]
  BlockDeviceMappings: [BlockDeviceMappings]
  State: State
  ProductCodes: [ProductCodes]
  Placement: Placement
  Monitoring: Monitoring
}

type Reservations {
  OwnerId: String
  ReservationId: String
  Instances: [Instances]
  Groups: [String]
}

type Ec2 {
  NextToken: String
  Reservations: [Reservations]
}

type AWS {
  RDS: Rds
  RDSClusters: RdsClusters
  EC2: Ec2
}

type Query {
  aws_ec2(
    profile: String = "default"
    filters: String = ""): Ec2
  aws_rds(
    profile: String = "default"
    filters: String = ""): Rds
}

schema {
  query: Query
}

