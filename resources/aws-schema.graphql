type TagList {
  Key: String
  Value: String
}

type OptionGroupMemberships {
  OptionGroupName: String
  Status: String
}

type SubnetAvailabilityZone {
  Name: String
}

type DbSubnetGroup {
  DBSubnetGroupName: String
  DBSubnetGroupDescription: String
  VpcId: String
  SubnetGroupStatus: String
  Subnets: [Subnets]
}

type DbParameterGroups {
  DBParameterGroupName: String
  ParameterApplyStatus: String
}

type VpcSecurityGroups {
  VpcSecurityGroupId: String
  Status: String
}

type Endpoint {
  Address: String
  Port: Int
  HostedZoneId: String
}

type DbInstances {
  DBInstanceIdentifier: String
  DBInstanceClass: String
  Engine: String
  DBInstanceStatus: String
  MasterUsername: String
  DBName: String
  AllocatedStorage: Int
  InstanceCreateTime: String
  PreferredBackupWindow: String
  BackupRetentionPeriod: Int
  AvailabilityZone: String
  PreferredMaintenanceWindow: String
  LatestRestorableTime: String
  MultiAZ: Boolean
  EngineVersion: String
  AutoMinorVersionUpgrade: Boolean
  LicenseModel: String
  Iops: Int
  PubliclyAccessible: Boolean
  StorageType: String
  DbInstancePort: Int
  StorageEncrypted: Boolean
  DbiResourceId: String
  CACertificateIdentifier: String
  CopyTagsToSnapshot: Boolean
  MonitoringInterval: Int
  EnhancedMonitoringResourceArn: String
  MonitoringRoleArn: String
  DBInstanceArn: String
  IAMDatabaseAuthenticationEnabled: Boolean
  PerformanceInsightsEnabled: Boolean
  DeletionProtection: Boolean
  MaxAllocatedStorage: Int
  TagList: [TagList]
  AssociatedRoles: [String]
  EnabledCloudwatchLogsExports: [String]
  DomainMemberships: [String]
  OptionGroupMemberships: [OptionGroupMemberships]
  ReadReplicaDBInstanceIdentifiers: [String]
  DBSubnetGroup: DbSubnetGroup
  DBParameterGroups: [DbParameterGroups]
  VpcSecurityGroups: [VpcSecurityGroups]
  DBSecurityGroups: [String]
  Endpoint: Endpoint
}

type Rds {
  DBInstances: [DbInstances]
}

type DbClusterMembers {
  DBInstanceIdentifier: String
  IsClusterWriter: Boolean
  DBClusterParameterGroupStatus: String
  PromotionTier: Int
}

type DbClusters {
  AllocatedStorage: Int
  BackupRetentionPeriod: Int
  DBClusterIdentifier: String
  DBClusterParameterGroup: String
  DBSubnetGroup: String
  Status: String
  EarliestRestorableTime: String
  Endpoint: String
  ReaderEndpoint: String
  MultiAZ: Boolean
  Engine: String
  EngineVersion: String
  LatestRestorableTime: String
  Port: Int
  MasterUsername: String
  PreferredBackupWindow: String
  PreferredMaintenanceWindow: String
  HostedZoneId: String
  StorageEncrypted: Boolean
  KmsKeyId: String
  DbClusterResourceId: String
  DBClusterArn: String
  IAMDatabaseAuthenticationEnabled: Boolean
  ClusterCreateTime: String
  EngineMode: String
  DeletionProtection: Boolean
  HttpEndpointEnabled: Boolean
  ActivityStreamStatus: String
  CopyTagsToSnapshot: Boolean
  CrossAccountClone: Boolean
  TagList: [TagList]
  DomainMemberships: [String]
  AssociatedRoles: [String]
  VpcSecurityGroups: [VpcSecurityGroups]
  DBClusterMembers: [DbClusterMembers]
  ReadReplicaIdentifiers: [String]
  AvailabilityZones: [String]
}

type RdsCluster {
  DBClusters: [DbClusters]
}

type Timeline {
  CreationDateTime: String
  ReadyDateTime: String
}

type StateChangeReason {
  Message: String
}

type Status {
  State: String
  Timeline: Timeline
  StateChangeReason: StateChangeReason
}

type Clusters {
  Id: String
  Name: String
  NormalizedInstanceHours: Int
  ClusterArn: String
  Status: Status
}

type Emr {
  Clusters: [Clusters]
}

type Users {
  Path: String
  UserName: String
  UserId: String
  Arn: String
  CreateDate: String
}

type User {
  NextToken: String
  Users: [Users]
}

type Tags {
  Key: String
  Value: String
}

type CidrBlockState {
  State: String
}

type CidrBlockAssociationSet {
  AssociationId: String
  CidrBlock: String
  CidrBlockState: CidrBlockState
}

type Vpcs {
  CidrBlock: String
  DhcpOptionsId: String
  State: String
  VpcId: String
  OwnerId: String
  InstanceTenancy: String
  IsDefault: Boolean
  Tags: [Tags]
  CidrBlockAssociationSet: [CidrBlockAssociationSet]
}

type Subnets {
  AvailabilityZone: String
  AvailabilityZoneId: String
  AvailableIpAddressCount: Int
  CidrBlock: String
  DefaultForAz: Boolean
  MapPublicIpOnLaunch: Boolean
  MapCustomerOwnedIpOnLaunch: Boolean
  State: String
  SubnetId: String
  VpcId: String
  OwnerId: String
  AssignIpv6AddressOnCreation: Boolean
  SubnetArn: String
  Tags: [Tags]
  Ipv6CidrBlockAssociationSet: [String]
}

type Subnet {
  NextToken: String
  Subnets: [Subnets]
}

type IpRanges {
  CidrIp: String
}

type IpPermissionsEgress {
  IpProtocol: String
  UserIdGroupPairs: [String]
  PrefixListIds: [String]
  Ipv6Ranges: [String]
  IpRanges: [IpRanges]
}

type IpPermissions {
  FromPort: Int
  IpProtocol: String
  ToPort: Int
  UserIdGroupPairs: [String]
  PrefixListIds: [String]
  Ipv6Ranges: [String]
  IpRanges: [IpRanges]
}

type SecurityGroups {
  Description: String
  GroupName: String
  OwnerId: String
  GroupId: String
  VpcId: String
  IpPermissionsEgress: [IpPermissionsEgress]
  IpPermissions: [IpPermissions]
}

type SecurityGroup {
  NextToken: String
  SecurityGroups: [SecurityGroups]
}

type EnclaveOptions {
  Enabled: Boolean
}

type MetadataOptions {
  State: String
  HttpTokens: String
  HttpPutResponseHopLimit: Int
  HttpEndpoint: String
}

type HibernationOptions {
  Configured: Boolean
}

type CapacityReservationSpecification {
  CapacityReservationPreference: String
}

type CpuOptions {
  CoreCount: Int
  ThreadsPerCore: Int
}

type PrivateIpAddresses {
  Primary: Boolean
  PrivateIpAddress: String
}

type Groups {
  GroupName: String
  GroupId: String
}

type Attachment {
  AttachTime: String
  AttachmentId: String
  DeleteOnTermination: Boolean
  DeviceIndex: Int
  Status: String
}

type NetworkInterfaces {
  Description: String
  MacAddress: String
  NetworkInterfaceId: String
  OwnerId: String
  PrivateIpAddress: String
  SourceDestCheck: Boolean
  Status: String
  SubnetId: String
  VpcId: String
  InterfaceType: String
  PrivateIpAddresses: [PrivateIpAddresses]
  Ipv6Addresses: [String]
  Groups: [Groups]
  Attachment: Attachment
}

type IamInstanceProfile {
  Arn: String
  Id: String
}

type Ebs {
  AttachTime: String
  DeleteOnTermination: Boolean
  Status: String
  VolumeId: String
}

type BlockDeviceMappings {
  DeviceName: String
  Ebs: Ebs
}

type State {
  Code: Int
  Name: String
}

type Placement {
  AvailabilityZone: String
  GroupName: String
  Tenancy: String
}

type Monitoring {
  State: String
}

type Instances {
  AmiLaunchIndex: Int
  ImageId: String
  InstanceId: String
  InstanceType: String
  KeyName: String
  LaunchTime: String
  Platform: String
  PrivateDnsName: String
  PrivateIpAddress: String
  PublicDnsName: String
  StateTransitionReason: String
  SubnetId: String
  VpcId: String
  Architecture: String
  ClientToken: String
  EbsOptimized: Boolean
  EnaSupport: Boolean
  Hypervisor: String
  RootDeviceName: String
  RootDeviceType: String
  SourceDestCheck: Boolean
  VirtualizationType: String
  EnclaveOptions: EnclaveOptions
  MetadataOptions: MetadataOptions
  HibernationOptions: HibernationOptions
  CapacityReservationSpecification: CapacityReservationSpecification
  CpuOptions: CpuOptions
  Tags: [Tags]
  SecurityGroups: [SecurityGroups]
  NetworkInterfaces: [NetworkInterfaces]
  IamInstanceProfile: IamInstanceProfile
  BlockDeviceMappings: [BlockDeviceMappings]
  State: State
  ProductCodes: [String]
  Placement: Placement
  Monitoring: Monitoring
}

type Reservations {
  OwnerId: String
  ReservationId: String
  Instances: [Instances]
  Groups: [String]
}

type Ec2 {
  NextToken: String
  Reservations: [Reservations]
}

type AWS {
  RDS: Rds
  RDSCluster: RdsCluster
  EMR: Emr
  User: User
  Vpcs: Vpcs
  Subnet: Subnet
  SecurityGroup: SecurityGroup
  EC2: Ec2
}

type Query {
  aws_ec2(
    profile: String = "default"
    filters: String = ""): Ec2
  aws_rds(
    profile: String = "default"
    filters: String = ""): Rds
}

schema {
  query: Query
}
